package component

type character map[int]int

type Mapping map[int]character

func NewMapping() *Mapping {

	m := Mapping(make(map[int]character))

	log.Info("initializing character map...")

	// Blank square for non printable characters
	m.add(0, 63, 63, 63, 63, 63, 63, 63, 63, 63, 0, 0)

	// Assign bitmap for each character in set
	m.add(32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)         // space
	m.add(33, 8, 8, 8, 8, 8, 8, 8, 0, 8, 0, 0)         // !
	m.add(34, 0, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0)      // "
	m.add(35, 0, 0, 20, 62, 20, 62, 20, 0, 0, 0, 0)    // #
	m.add(36, 8, 60, 10, 10, 28, 40, 40, 30, 8, 0, 0)  // $
	m.add(37, 0, 66, 37, 18, 8, 36, 82, 33, 0, 0, 0)   // %
	m.add(38, 8, 20, 20, 8, 12, 74, 82, 34, 92, 0, 0)  // &
	m.add(39, 8, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0)       // '
	m.add(40, 56, 12, 6, 3, 1, 1, 3, 6, 12, 56, 0)     // (
	m.add(41, 7, 12, 24, 48, 32, 32, 48, 24, 12, 7, 0) // )
	m.add(42, 0, 73, 42, 28, 127, 28, 42, 73, 0, 0, 0) // *
	m.add(43, 0, 0, 0, 8, 28, 8, 0, 0, 0, 0, 0)        // +
	m.add(44, 0, 0, 0, 0, 0, 0, 0, 8, 8, 4, 0)         // ,
	m.add(45, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0)        // -
	m.add(46, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0)         // .
	m.add(47, 0, 128, 64, 32, 16, 8, 4, 2, 1, 0, 0)    // /

	m.add(48, 12, 18, 33, 33, 45, 33, 33, 18, 12, 0, 0) // 0
	m.add(49, 4, 6, 5, 4, 4, 4, 4, 4, 31, 0, 0)         // 1
	m.add(50, 30, 33, 32, 32, 16, 8, 4, 2, 63, 0, 0)    // 2
	m.add(51, 14, 17, 32, 16, 12, 16, 32, 17, 14, 0, 0) // 3
	m.add(52, 16, 24, 20, 18, 17, 63, 16, 16, 16, 0, 0) // 4
	m.add(53, 63, 1, 1, 15, 16, 32, 32, 16, 15, 0, 0)   // 5
	m.add(54, 62, 1, 1, 1, 31, 33, 33, 33, 30, 0, 0)    // 6
	m.add(55, 0, 127, 64, 32, 16, 8, 4, 2, 1, 0, 0)     // 7
	m.add(56, 12, 18, 33, 18, 12, 18, 33, 18, 12, 0, 0) // 8
	m.add(57, 30, 33, 33, 33, 62, 32, 32, 32, 30, 0, 0) // 9

	m.add(58, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 0)          // :
	m.add(59, 0, 0, 0, 8, 0, 0, 0, 8, 8, 4, 0)          // ;
	m.add(60, 16, 8, 4, 2, 1, 2, 4, 8, 16, 0, 0)        // <
	m.add(61, 0, 0, 0, 28, 0, 28, 0, 0, 0, 0, 0)        // =
	m.add(62, 2, 4, 8, 16, 32, 16, 8, 4, 2, 0, 0)       // >
	m.add(63, 56, 68, 68, 64, 96, 24, 8, 8, 0, 8, 0)    // ?
	m.add(64, 28, 34, 73, 85, 85, 89, 33, 2, 124, 0, 0) // @

	m.add(65, 8, 28, 20, 34, 34, 127, 65, 65, 65, 0, 0)  // A
	m.add(66, 15, 17, 33, 17, 15, 17, 33, 17, 15, 0, 0)  // B
	m.add(67, 28, 34, 65, 1, 1, 1, 65, 34, 28, 0, 0)     // C
	m.add(68, 15, 17, 33, 33, 33, 33, 33, 17, 15, 0, 0)  // D
	m.add(69, 63, 1, 1, 1, 31, 1, 1, 1, 63, 0, 0)        // E
	m.add(70, 63, 1, 1, 1, 31, 1, 1, 1, 1, 0, 0)         // F
	m.add(71, 28, 34, 65, 1, 1, 57, 65, 34, 28, 0, 0)    // G
	m.add(72, 33, 33, 33, 33, 63, 33, 33, 33, 33, 0, 0)  // H
	m.add(73, 31, 4, 4, 4, 4, 4, 4, 4, 31, 0, 0)         // I
	m.add(74, 32, 32, 32, 32, 32, 32, 33, 33, 30, 0, 0)  // J
	m.add(75, 65, 33, 17, 9, 5, 11, 17, 33, 65, 0, 0)    // K
	m.add(76, 1, 1, 1, 1, 1, 1, 1, 1, 63, 0, 0)          // L
	m.add(77, 99, 99, 119, 93, 73, 65, 65, 65, 65, 0, 0) // M
	m.add(78, 67, 67, 71, 77, 89, 113, 97, 65, 65, 0, 0) // N
	m.add(79, 12, 18, 33, 33, 33, 33, 33, 18, 12, 0, 0)  // O
	m.add(80, 31, 33, 33, 33, 31, 1, 1, 1, 1, 0, 0)      // P
	m.add(81, 12, 18, 33, 33, 33, 33, 41, 18, 44, 0, 0)  // Q
	m.add(82, 15, 17, 33, 33, 31, 5, 9, 17, 33, 0, 0)    // R
	m.add(83, 60, 2, 1, 1, 30, 32, 32, 16, 15, 0, 0)     // S
	m.add(84, 127, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0)         // T
	m.add(85, 33, 33, 33, 33, 33, 33, 33, 18, 12, 0, 0)  // U
	m.add(86, 65, 65, 65, 65, 99, 34, 54, 28, 8, 0, 0)   // V
	m.add(87, 65, 65, 73, 73, 93, 85, 119, 99, 65, 0, 0) // W
	m.add(88, 65, 99, 54, 28, 8, 28, 54, 99, 65, 0, 0)   // X
	m.add(89, 65, 65, 99, 34, 20, 8, 8, 8, 8, 0, 0)      // Y
	m.add(90, 0, 63, 32, 16, 8, 4, 2, 1, 63, 0, 0)       // Z

	m.add(91, 7, 1, 1, 1, 1, 1, 1, 1, 7, 0, 0)          // [
	m.add(92, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0, 0)     // \
	m.add(93, 56, 32, 32, 32, 32, 32, 32, 32, 56, 0, 0) // ]
	m.add(94, 8, 20, 34, 0, 0, 0, 0, 0, 0, 0, 0)        // ^
	m.add(95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 0)        // _

	return &m
}

func (m Mapping) Get(i int) character {

	if i < 32 || i > 126 {
		i = 0
	}

	//TODO implement lowercase letters
	if i > 96 && i < 123 {
		i = 0
	}

	return m[i]
}

func (m Mapping) add(index int, v ...int) {

	if len(v) < 11 {
		log.Fatalf("cannot add character %v", index)
	}

	m[index] = character{
		0:  v[0],
		1:  v[1],
		2:  v[2],
		3:  v[3],
		4:  v[4],
		5:  v[5],
		6:  v[6],
		7:  v[7],
		8:  v[8],
		9:  v[9],
		10: v[10],
	}
}
