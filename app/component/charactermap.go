package component

type character map[int]int

type Mapping map[int]character

func NewMapping() *Mapping {

	m := Mapping(make(map[int]character))

	log.Info("initializing character map...")

	// Blank square for non printable characters
	m.add(0, 0, 0, 63, 63, 63, 63, 63, 63, 63, 63, 63)

	// Assign bitmap for each character in set
	m.add(32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)         // space
	m.add(33, 0, 0, 8, 0, 8, 8, 8, 8, 8, 8, 8)         // !
	m.add(34, 0, 0, 0, 0, 0, 0, 0, 20, 20, 20, 0)      // "
	m.add(35, 0, 0, 0, 0, 20, 62, 20, 62, 20, 0, 0)    // #
	m.add(36, 0, 0, 8, 30, 40, 40, 28, 10, 10, 60, 8)  // $
	m.add(37, 0, 0, 0, 33, 82, 36, 8, 18, 37, 66, 0)   // %
	m.add(38, 0, 0, 92, 34, 82, 74, 12, 8, 20, 20, 8)  // &
	m.add(39, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 8)       // '
	m.add(40, 0, 56, 12, 6, 3, 1, 1, 3, 6, 12, 56)     // (
	m.add(41, 0, 7, 12, 24, 48, 32, 32, 48, 24, 12, 7) // )
	m.add(42, 0, 0, 0, 73, 42, 28, 127, 28, 42, 73, 0) // *
	m.add(43, 0, 0, 0, 0, 0, 8, 28, 8, 0, 0, 0)        // +
	m.add(44, 0, 4, 8, 8, 0, 0, 0, 0, 0, 0, 0)         // ,
	m.add(45, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0)        // -
	m.add(46, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0)         // .
	m.add(47, 0, 0, 1, 2, 4, 8, 16, 32, 64, 128, 0)    // /

	m.add(48, 0, 0, 12, 18, 33, 33, 45, 33, 33, 18, 12) // 0
	m.add(49, 0, 0, 31, 4, 4, 4, 4, 4, 5, 6, 4)         // 1
	m.add(50, 0, 0, 63, 2, 4, 8, 16, 32, 32, 33, 30)    // 2
	m.add(51, 0, 0, 14, 17, 32, 16, 12, 16, 32, 17, 14) // 3
	m.add(52, 0, 0, 16, 16, 16, 63, 17, 18, 20, 24, 16) // 4
	m.add(53, 0, 0, 15, 16, 32, 32, 16, 15, 1, 1, 63)   // 5
	m.add(54, 0, 0, 30, 33, 33, 33, 31, 1, 1, 1, 62)    // 6
	m.add(55, 0, 0, 1, 2, 4, 8, 16, 32, 64, 127, 0)     // 7
	m.add(56, 0, 0, 12, 18, 33, 18, 12, 18, 33, 18, 12) // 8
	m.add(57, 0, 0, 30, 32, 32, 32, 62, 33, 33, 33, 30) // 9

	m.add(58, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0)          // :
	m.add(59, 0, 4, 8, 8, 0, 0, 0, 8, 0, 0, 0)          // ;
	m.add(60, 0, 0, 16, 8, 4, 2, 1, 2, 4, 8, 16)        // <
	m.add(61, 0, 0, 0, 0, 0, 28, 0, 28, 0, 0, 0)        // =
	m.add(62, 0, 0, 2, 4, 8, 16, 32, 16, 8, 4, 2)       // >
	m.add(63, 0, 8, 0, 8, 8, 24, 96, 64, 68, 68, 56)    // ?
	m.add(64, 0, 0, 124, 2, 33, 89, 85, 85, 73, 34, 28) // @

	m.add(65, 0, 0, 65, 65, 65, 127, 34, 34, 20, 28, 8)  // A
	m.add(66, 0, 0, 15, 17, 33, 17, 15, 17, 33, 17, 15)  // B
	m.add(67, 0, 0, 28, 34, 65, 1, 1, 1, 65, 34, 28)     // C
	m.add(68, 0, 0, 15, 17, 33, 33, 33, 33, 33, 17, 15)  // D
	m.add(69, 0, 0, 63, 1, 1, 1, 31, 1, 1, 1, 63)        // E
	m.add(70, 0, 0, 1, 1, 1, 1, 31, 1, 1, 1, 63)         // F
	m.add(71, 0, 0, 28, 34, 65, 57, 1, 1, 65, 34, 28)    // G
	m.add(72, 0, 0, 33, 33, 33, 33, 63, 33, 33, 33, 33)  // H
	m.add(73, 0, 0, 31, 4, 4, 4, 4, 4, 4, 4, 31)         // I
	m.add(74, 0, 0, 30, 33, 33, 32, 32, 32, 32, 32, 32)  // J
	m.add(75, 0, 0, 65, 33, 17, 11, 5, 9, 17, 33, 65)    // K
	m.add(76, 0, 0, 63, 1, 1, 1, 1, 1, 1, 1, 1)          // L
	m.add(77, 0, 0, 65, 65, 65, 65, 73, 93, 119, 99, 99) // M
	m.add(78, 0, 0, 65, 65, 97, 113, 89, 77, 71, 67, 67) // N
	m.add(79, 0, 0, 12, 18, 33, 33, 33, 33, 33, 18, 12)  // O
	m.add(80, 0, 0, 1, 1, 1, 1, 31, 33, 33, 33, 31)      // P
	m.add(81, 0, 0, 44, 18, 41, 33, 33, 33, 33, 18, 12)  // Q
	m.add(82, 0, 0, 33, 17, 9, 5, 31, 33, 33, 17, 15)    // R
	m.add(83, 0, 0, 15, 16, 32, 32, 30, 1, 1, 2, 60)     // S
	m.add(84, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 127)         // T
	m.add(85, 0, 0, 12, 18, 33, 33, 33, 33, 33, 33, 33)  // U
	m.add(86, 0, 0, 8, 28, 54, 34, 99, 65, 65, 65, 65)   // V
	m.add(87, 0, 0, 65, 99, 119, 85, 93, 73, 73, 65, 65) // W
	m.add(88, 0, 0, 65, 99, 54, 28, 8, 28, 54, 99, 65)   // X
	m.add(89, 0, 0, 8, 8, 8, 8, 20, 34, 99, 65, 65)      // Y
	m.add(90, 0, 0, 63, 1, 2, 4, 8, 16, 32, 63, 0)       // Z

	m.add(91, 0, 0, 7, 1, 1, 1, 1, 1, 1, 1, 7)          // [
	m.add(92, 0, 0, 128, 64, 32, 16, 8, 4, 2, 1, 0)     // \
	m.add(93, 0, 0, 56, 32, 32, 32, 32, 32, 32, 32, 56) // ]
	m.add(94, 0, 0, 0, 0, 0, 0, 0, 0, 34, 20, 8)        // ^
	m.add(95, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0)        // _

	return &m
}

func (m Mapping) Get(i int) character {

	if i < 32 || i > 126 {
		i = 0
	}

	//TODO implement lowercase letters
	if i > 96 || i < 123 {
		i = 0
	}

	return m[i]
}

func (m Mapping) add(index int, v ...int) {

	if len(v) < 11 {
		log.Fatalf("cannot add character %v", index)
	}

	m[index] = character{
		0:  v[0],
		1:  v[1],
		2:  v[2],
		3:  v[3],
		4:  v[4],
		5:  v[5],
		6:  v[6],
		7:  v[7],
		8:  v[8],
		9:  v[9],
		10: v[10],
	}
}
